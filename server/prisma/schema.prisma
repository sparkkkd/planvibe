generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ProjectMemberRole {
  OWNER
  MEMBER
  MANAGER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityEntity {
  TASK
  COMMENT
  ATTACHMENT
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  name     String
  role     Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects      ProjectMember[]
  tasks         Task[]          @relation("AssigneeTasks")
  comments      Comment[]
  createdTasks  Task[]          @relation("CreatedTasks")
  attachments   Attachment[]
  ownedProjects Project[]       @relation("ProjectOwner")
  activities    Activity[]

  @@map("users")
}

model Project {
  id String @id @default(uuid())

  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Relations
  members    ProjectMember[]
  tasks      Task[]
  activities Activity[]

  @@map("projects")
}

model ProjectMember {
  projectId String
  userId    String
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@index([userId])
  @@index([projectId])
  @@map("project_member")
}

model Task {
  id String @id @default(uuid())

  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignee   User?   @relation("AssigneeTasks", fields: [assigneeId], references: [id])
  assigneeId String?

  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  attachments Attachment[]
  comments    Comment[]

  @@index([projectId])
  @@index([assigneeId])
  @@map("tasks")
}

model Comment {
  id String @id @default(uuid())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  @@map("comments")
}

model Attachment {
  id String @id @default(uuid())

  url      String
  filename String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@map("attachments")
}

model Activity {
  id String @id @default(uuid())

  entity   ActivityEntity
  entityId String

  action      ActivityAction
  description String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([userId])
  @@map("activities")
}
